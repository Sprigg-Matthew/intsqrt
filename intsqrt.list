     1                                  ; INTEGER SQUARE ROOT
     2                                  ;
     3                                  ; file: intsqrt.asm
     4                                  ;
     5                                  ; Author: Matthew Sprigg
     6                                  ;
     7                                  ; Description: Calculates the integer square root
     8                                  ; 	of a number rounded down. This is useful for
     9                                  ;	certain algorithms where an integer does not
    10                                  ;	exceed the square root of a certain number
    11                                  ;	because it takes far fewer bytes than other
    12                                  ;	square root algorithms such as the babylonian
    13                                  ;	method.
    14                                  ;
    15                                  ; Example: 16 - 1 - 3 - 5 - 7 = 0
    16                                  ;
    17                                  ;	There are four odd subtractors, thus the root is zero.
    18                                  ;
    19                                  ;Ex 2:	4 - 1 - 3 = 0;
    20                                  ;
    21                                  ;	Root = 2.
    22                                  ;
    23                                  ;Ex 3: 12 - 1 - 3 - 5 - 7 = -4
    24                                  ;	
    25                                  ;	Less than zero, therefore 12 is not an even square.
    26                                  ;	The square root is between 3 and 4.
    27                                  ;	The integer square root is 3.
    28                                  
    29                                  
    30                                  
    31                                  %include "asm_io.inc"
    32                              <1> 	extern  read_int, print_int, print_string
    33                              <1> 	extern	read_char, print_char, print_nl
    34                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
    35                              <1> 
    36                              <1> %macro 	dump_regs 1
    37                              <1> 	push	  dword %1
    38                              <1> 	call	  sub_dump_regs
    39                              <1> %endmacro
    40                              <1> 
    41                              <1> 
    42                              <1> ;
    43                              <1> ; usage: dump_mem label, start-address, # paragraphs
    44                              <1> %macro  dump_mem 3
    45                              <1> 	push	 dword %1
    46                              <1> 	push	 dword %2
    47                              <1> 	push	 dword %3
    48                              <1> 	call	 sub_dump_mem
    49                              <1> %endmacro
    50                              <1> 
    51                              <1> %macro	dump_math 1
    52                              <1> 	push	 dword %1
    53                              <1> 	call	 sub_dump_math
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro  dump_stack 3
    57                              <1> 	push	 dword %3
    58                              <1>         push     dword %2
    59                              <1> 	push	 dword %1
    60                              <1>         call     sub_dump_stack
    61                              <1> %endmacro
    62                                  
    63                                  
    64                                  ;--------------------------------------------------------
    65                                  ; initialized data is put in the .data segment
    66                                  ;
    67                                  segment .data
    68                                  
    69                                  ;--------------------------------------------------------
    70                                  ; uninitialized data is put in the .bss segment
    71                                  ;
    72                                  segment .bss
    73                                  
    74                                  ;--------------------------------------------------------
    75                                  ; code is put in the .text segment
    76                                  ;
    77                                  segment .text
    78                                          global intsqrt 		; make accessable to other modules.
    79                                  
    80                                  
    81                                  ;--------------------------------------------------------
    82                                  ; FUNCTIONS / SUBPROGRAMS			 	;
    83                                  ;--------------------------------------------------------
    84                                  
    85                                  
    86                                  intsqrt:
    87                                  ;
    88                                  ; int intsqrt(int n) {
    89                                  ; 
    90                                  ;	 int counter = 0;
    91                                  ;	 int subtractor = 1;
    92                                  ;
    93                                  ;	 while (n > 0)	{
    94                                  ;		n -= subtractor;
    95                                  ;		subtractor+=2
    96                                  ;		counter++
    97                                  ;	}
    98                                  ;
    99                                  ;	return counter;
   100                                  ;}
   101                                  
   102                                  ;--------------------------------------------------------
   103                                  ; PROLOGUE						;
   104                                  ;--------------------------------------------------------
   105                                  
   106                                  ;     	   VAR TABLE
   107                                  ; ==============================
   108                                  ;   Data  | Pointer | Pseudocode
   109                                  ; ------------------------------
   110                                  ; local 1 @ [ebp-4] <-- counter
   111                                  ; local 2 @ [ebp-8] <-- subtractor
   112                                  ; sav EBP @ [ebp]
   113                                  ; retaddr @ [ebp+4]
   114                                  ; param 1 @ [ebp+8] <-- n
   115                                  	
   116 00000000 55                      	push 	ebp		; save original ebp val on stack.
   117                                  
   118 00000001 89E5                    	mov	ebp, esp	; new EBP = ESP
   119 00000003 83EC08                  	sub	esp, 8		; Local vars need 2 dwords.
   120                                  
   121 00000006 53                      	push	ebx		; Preserve ebx.
   122                                  
   123 00000007 C745FC00000000          	mov dword [ebp-4], 0	; counter = 0; 
   124 0000000E C745F801000000          	mov dword [ebp-8], 1	; subtractor = 1;
   125                                  	
   126 00000015 B800000000              	mov eax, 0		; eax init at zero.	
   127                                  ;-------------------------------------------------------
   128                                  ; CODE							;
   129                                  ;--------------------------------------------------------
   130                                  	
   131 0000001A 8B5DF8                  	mov	ebx, [ebp-8]
   132                                  	; arithmatic instructions such as sub cannot
   133                                  	; operate on two memory locations.
   134                                  while_rt: ; (n > 0)
   135 0000001D 295D08                  	sub	[ebp+8], ebx	; n -= subtractor;
   136 00000020 83C302                  	add	ebx, 2		; subtractor += 2;
   137 00000023 FF45FC                  	inc dword [ebp-4]	; counter++;
   138                                  
   139 00000026 837D0800                	cmp dword [ebp+8], 0	; if (n <= 0) break;
   140 0000002A 7FF1                    	jg	while_rt
   141                                  	
   142 0000002C 0F95C0                  	setne	al			; eax = 1 if (n != 0) else 0	
   143 0000002F 0345FC                  	add	eax, [ebp-4]		; add counter and return.
   144                                  
   145                                  	; Because the integer square root is one less than the result
   146                                  	; 	in counter UNLESS the result is zero, it is necessary
   147                                  	;	to have two possible results from the single var counter.
   148                                  	;	SETNE removes the need for branches and takes fewer bytes.
   149                                  
   150                                  ;--------------------------------------------------------
   151                                  ; EPILOGUE						;
   152                                  ;--------------------------------------------------------
   153                                  	
   154 00000032 5B                      	pop	ebx	; restore ebx
   155 00000033 83C408                  	add	esp, 8	; clean up local vars.
   156 00000036 5D                      	pop	ebp	; restore ebp.
   157 00000037 C3                      	ret		; return.
